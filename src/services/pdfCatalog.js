import React from 'react'
import { pdf } from '@react-pdf/renderer'
import { saveAs } from 'file-saver'
import { supabase } from '../supabaseClient'
import { CatalogDocument } from '../components/pdf/Templates'

// Funci√≥n para obtener datos del usuario logueado
const fetchUserData = async () => {
  console.log('üîç Obteniendo sesi√≥n de Supabase...')
  const { data: { session }, error: sessionError } = await supabase.auth.getSession()
  
  if (sessionError) {
    console.error('‚ùå Error en sesi√≥n:', sessionError)
    throw new Error('Error al obtener sesi√≥n activa')
  }
  
  if (!session) {
    console.error('‚ùå No hay sesi√≥n activa')
    throw new Error('No hay sesi√≥n activa')
  }

  console.log('‚úÖ Sesi√≥n obtenida, user.id:', session.user.id)

  const { data: userData, error: userError } = await supabase
    .from('users')
    .select('name, almcnt, user_id')
    .eq('user_id', session.user.id)
    .single()

  if (userError) {
    console.error('‚ùå Error al obtener datos del usuario:', userError)
    throw new Error(`Error al obtener datos del usuario: ${userError.message}`)
  }

  if (!userData) {
    console.error('‚ùå No se encontraron datos del usuario')
    throw new Error('No se encontraron datos del usuario en la tabla users')
  }

  console.log('‚úÖ Datos del usuario obtenidos:', userData)
  return userData
}

// Funci√≥n para obtener datos de productos y categor√≠as
const fetchCatalogData = async (almcnt) => {
  console.log('üîç Obteniendo productos para almac√©n:', almcnt)
  
  // Consulta exacta como solicitada: select code, name, price, image, unit, stock from products where almcnt=(local storage) and stock > 0
  const { data: products, error: productsError } = await supabase
    .from('products')
    .select('code, name, price, image, unit, stock, category_id')
    .eq('almcnt', almcnt)
    .gt('stock', 0)
    .order('category_id', { ascending: true })
    .order('name', { ascending: true })

  if (productsError) {
    throw new Error(`Error al obtener productos: ${productsError.message}`)
  }

  console.log(`‚úÖ Obtenidos ${products.length} productos con stock > 0`)

  // Obtener IDs √∫nicos de categor√≠as que tienen productos
  const uniqueCategoryIds = [...new Set(products.map(p => p.category_id))]
  console.log('üè∑Ô∏è IDs de categor√≠as encontradas:', uniqueCategoryIds)

  // Obtener informaci√≥n de las categor√≠as
  const { data: categories, error: categoriesError } = await supabase
    .from('categories')
    .select('id, name')
    .in('id', uniqueCategoryIds)
    .order('name', { ascending: true })

  if (categoriesError) {
    throw new Error(`Error al obtener categor√≠as: ${categoriesError.message}`)
  }

  console.log(`‚úÖ Obtenidas ${categories.length} categor√≠as`)

  return { products, categories }
}

// Funci√≥n para agrupar productos por categor√≠a
const groupProductsByCategory = (products, categories) => {
  const categoryMap = categories.reduce((map, category) => {
    map[category.id] = {
      ...category,
      products: []
    }
    return map
  }, {})
  
  // Agrupar productos por categor√≠a
  products.forEach(product => {
    if (categoryMap[product.category_id]) {
      categoryMap[product.category_id].products.push(product)
    }
  })
  
  // Filtrar categor√≠as que tienen productos
  return Object.values(categoryMap).filter(category => category.products.length > 0)
}

// Funci√≥n principal para generar el cat√°logo
export const generateCatalog = async ({ includePrices = true }) => {
  try {
    console.log('üöÄ Iniciando generaci√≥n de cat√°logo...')
    
    // Obtener datos del usuario logueado (nombre y almac√©n)
    const userData = await fetchUserData()
    const { name: userName, almcnt } = userData
    
    console.log(`üë§ Usuario: ${userName}, üè™ Almac√©n: ${almcnt}`)
    
    // Obtener datos de productos y categor√≠as
    const { products, categories } = await fetchCatalogData(almcnt)
    
    if (products.length === 0) {
      throw new Error('No se encontraron productos con stock para generar el cat√°logo')
    }
    
    // Agrupar productos por categor√≠a
    const categorizedProducts = groupProductsByCategory(products, categories)
    
    console.log(`üìä Generando cat√°logo con ${products.length} productos en ${categorizedProducts.length} categor√≠as`)
    console.log('üñºÔ∏è Im√°genes SIN compresi√≥n - usando tama√±o original desde /imagenes/')
    
    // Generar PDF
    const pdfBlob = await pdf(
      React.createElement(CatalogDocument, {
        categories: categorizedProducts,
        includePrices: includePrices,
        userName: userName,
        almcnt: almcnt
      })
    ).toBlob()
    
    // Descargar PDF
    const fileName = `catalogo_${new Date().toISOString().slice(0, 10).replace(/-/g, '')}_${includePrices ? 'con_precios' : 'sin_precios'}.pdf`
    saveAs(pdfBlob, fileName)
    
    console.log('‚úÖ Cat√°logo generado exitosamente:', fileName)
    
  } catch (error) {
    console.error('‚ùå Error generando cat√°logo:', error)
    throw error
  }
} 